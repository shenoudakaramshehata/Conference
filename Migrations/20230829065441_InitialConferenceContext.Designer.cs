// <auto-generated />
using System;
using Conference.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Conference.Migrations
{
    [DbContext(typeof(ConferenceContext))]
    [Migration("20230829065441_InitialConferenceContext")]
    partial class InitialConferenceContext
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Conference.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<string>("EventBarcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("EventIsActive")
                        .HasColumnType("bit");

                    b.Property<string>("EventLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventVideo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("Conference.Models.EventActivity_Single", b =>
                {
                    b.Property<int>("EventActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventActivityId"));

                    b.Property<string>("EventActivityDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventActivityTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EventActivityType")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("EventActivityId");

                    b.HasIndex("EventId");

                    b.ToTable("EventActivity_Single");
                });

            modelBuilder.Entity("Conference.Models.EventSubscription", b =>
                {
                    b.Property<int>("EventSubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventSubscriptionId"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EventSubscriptionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EventSubscriptionFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventSubscriptionMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EventSubscriptionQueue")
                        .HasColumnType("int");

                    b.Property<int?>("EventSubscriptionType")
                        .HasColumnType("int");

                    b.HasKey("EventSubscriptionId");

                    b.HasIndex("EventId");

                    b.ToTable("EventSubscription");
                });

            modelBuilder.Entity("Conference.Models.SubscriptionActivity", b =>
                {
                    b.Property<int>("SubscriptionActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionActivityId"));

                    b.Property<int>("EventActivityId")
                        .HasColumnType("int");

                    b.Property<int>("EventSubscriptionId")
                        .HasColumnType("int");

                    b.HasKey("SubscriptionActivityId");

                    b.HasIndex("EventActivityId");

                    b.HasIndex("EventSubscriptionId");

                    b.ToTable("SubscriptionActivity");
                });

            modelBuilder.Entity("Conference.Models.EventActivity_Single", b =>
                {
                    b.HasOne("Conference.Models.Event", "Event")
                        .WithMany("EventActivity_Singles")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EventActivity_Single_Event");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Conference.Models.EventSubscription", b =>
                {
                    b.HasOne("Conference.Models.Event", "Event")
                        .WithMany("EventSubscriptions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EventSubscription_Event");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Conference.Models.SubscriptionActivity", b =>
                {
                    b.HasOne("Conference.Models.EventActivity_Single", "EventActivity")
                        .WithMany("SubscriptionActivities")
                        .HasForeignKey("EventActivityId")
                        .IsRequired()
                        .HasConstraintName("FK_SubscriptionActivity_EventActivity_Single");

                    b.HasOne("Conference.Models.EventSubscription", "EventSubscription")
                        .WithMany("SubscriptionActivities")
                        .HasForeignKey("EventSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SubscriptionActivity_EventSubscription");

                    b.Navigation("EventActivity");

                    b.Navigation("EventSubscription");
                });

            modelBuilder.Entity("Conference.Models.Event", b =>
                {
                    b.Navigation("EventActivity_Singles");

                    b.Navigation("EventSubscriptions");
                });

            modelBuilder.Entity("Conference.Models.EventActivity_Single", b =>
                {
                    b.Navigation("SubscriptionActivities");
                });

            modelBuilder.Entity("Conference.Models.EventSubscription", b =>
                {
                    b.Navigation("SubscriptionActivities");
                });
#pragma warning restore 612, 618
        }
    }
}
